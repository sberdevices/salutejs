/* eslint-disable no-use-before-define */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Тип запроса.
 */
export type SystemMessageName =
    | 'CLOSE_APP'
    | 'MESSAGE_TO_SKILL'
    | 'RUN_APP'
    | 'SERVER_ACTION'
    | 'ANSWER_TO_USER'
    | 'ERROR'
    | 'NOTHING_FOUND'
    | 'POLICY_RUN_APP';
/**
 * Тип смартапа. Обратите внимание, что ассистент перехватывает навигационные
 * команды 'вверх', 'вниз', 'влево' и 'вправо' только в Canvas App (тип приложения WEB_APP).
 * В этом случае команды обрабатываются на уровне фронтенда приложения.
 * В остальных случаях, команды передаются в бекэнд активного приложения.
 */
export type AppType = 'DIALOG' | 'WEB_APP' | 'APK' | 'CHAT_APP' | 'EMBEDDED_APP';
/**
 * Операционная система устройства.
 */
export type PlatformType = 'android' | 'ios' | 'web' | 'WEBDBG';
/**
 * Поверхность, от которой приходит вызов ассистента. Например, приложение СберБанк Онлайн или SberBox.
 */
export type Surface = 'SBERBOX' | 'COMPANION' | 'STARGATE';
/**
 * Идентификатор персонажа, которого выбрал пользователь.
 */
export type CharacterId = 'sber' | 'eva' | 'joy';
/**
 * Имя персонажа.
 */
export type CharacterName = 'Сбер' | 'Афина' | 'Джой';
export type PermissionType = 'geo' | 'read_contacts' | 'record_audio' | 'push';
export type PermissionStatus = 'granted' | 'denied_once' | 'denied_permanently';
/**
 * Список подцензурных категорий, обнаруженных в тексте или реплике пользователя.
 */
export type CensorClass = 'politicians' | 'obscene' | 'model_response';
/**
 * Список характеристик эмоциональной окраски текста пользователя.
 */
export type PhraseEmotions = 'negative' | 'positive' | 'neutral';
export type ListOfTokenTypesData = {
    token_type: string;
    token_value: TokenValue;
    [k: string]: unknown;
}[];
/**
 * Эмоция ассистента, которую он показывает с помощью анимации кнопки.
 */
export type EmotionId =
    | 'igrivost'
    | 'udovolstvie'
    | 'podavleniye_gneva'
    | 'smushchennaya_ulibka'
    | 'simpatiya'
    | 'oups'
    | 'laugh'
    | 'ok_prinyato'
    | 'bespokoistvo'
    | 'predvkusheniye'
    | 'vinovatiy'
    | 'zhdu_otvet'
    | 'zadumalsa'
    | 'neznayu'
    | 'nedoumenie'
    | 'nedovolstvo'
    | 'nesoglasie'
    | 'pechal'
    | 'radost'
    | 'sochuvstvie'
    | 'strakh'
    | 'zainteresovannost';
export type Action =
    | TextAction
    | DeepLinkAction
    | SendContactPhone
    | ServerAction
    | StartSmartSearchAction
    | CopyTextAction;
export type Card =
    | ListCard
    | GalleryCard
    | GridCard
    | DiscoveryCard
    | QRCodeCard
    | SimpleList
    | WidgetTitleCard
    | WidgetGallery
    | WidgetGalleryWithCategories
    | WidgetSingleCard
    | WidgetTwoColumns;
/**
 * Карточка с вертикальным списком ячеек.
 */
export type ListCard = CardBase & {
    cells: CellView[];
    type: 'list_card';
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    background_image?: FlexibleImageView;
    [k: string]: unknown;
};
/**
 * Возможные размеры отступов
 */
export type Dimension = '0x' | '1x' | '2x' | '3x' | '4x' | '5x' | '6x' | '7x' | '8x' | '9x' | '10x' | '12x' | '16x';
export type CellView =
    | LeftRightCellView
    | TextCellView
    | ButtonCellView
    | ImageCellView
    | DetailsCellView
    | WeatherCellView
    | RightSideCellView
    | FlexibleImageCellView;
export type LeftView = SimpleLeftView | FastAnswerLeftView | FlexibleImageLeftRightCellView;
/**
 * Адрес графического ресурса, может быть задан в пространстве интернет
 * или в локальном пространстве клиента, url имеет больший приоритет чем local
 */
export type ImageAddress =
    | {
          /**
           * Тип ресурса.
           */
          type: 'url';
          /**
           * Адрес картинки в интернете
           */
          url: string;
          /**
           * Hash катинки в интернете(опционален)
           */
          hash?: string;
          placeholder?: LocalImageIdentificator;
          [k: string]: unknown;
      }
    | {
          /**
           * Тип ресурса.
           */
          type: 'local';
          identificator: LocalImageIdentificator;
          [k: string]: unknown;
      };
/**
 * Заглушка, которую показываем, когда нет изображения или оно невалидно(опционален)
 */
export type LocalImageIdentificator =
    | 'add_contactless_payment'
    | 'apple_wallet'
    | 'arrow_right_chevron_rectangle'
    | 'arrow_right_trace_line'
    | 'arrows_forward_back'
    | 'atm_banknote'
    | 'bag'
    | 'ballot_paper'
    | 'bar_graph'
    | 'basket'
    | 'beach_umbrella'
    | 'bell'
    | 'bell_crossed'
    | 'between_accounts'
    | 'boarding_pass'
    | 'bolt'
    | 'box'
    | 'building'
    | 'calculator'
    | 'camera'
    | 'candy'
    | 'capsule'
    | 'car'
    | 'card'
    | 'card_amex'
    | 'card_amex_black'
    | 'card_amex_gold'
    | 'card_blocked'
    | 'card_chevron_left'
    | 'card_ghost'
    | 'card_maestro_null'
    | 'card_mc'
    | 'card_mc_black'
    | 'card_mc_gold'
    | 'card_mc_null'
    | 'card_mir'
    | 'card_mir_black'
    | 'card_mir_gold'
    | 'card_mir_null'
    | 'card_momentum'
    | 'card_on_card'
    | 'card_plus'
    | 'card_pro100_null'
    | 'card_uek'
    | 'card_viewfinder'
    | 'card_visa_gold'
    | 'card_visa_black'
    | 'card_visa'
    | 'card_visa_infinite_sber'
    | 'card_visa_infinite'
    | 'card_visa_digital'
    | 'card_visa_null'
    | 'cards_carousel'
    | 'case'
    | 'case_diagram'
    | 'chess_piece'
    | 'circle_cross'
    | 'circle_plus'
    | 'clock'
    | 'coat_of_arms'
    | 'coin'
    | 'coin_heart'
    | 'color_spasibo'
    | 'color_total'
    | 'counterclock_wise'
    | 'crown'
    | 'digital_banknotes'
    | 'document'
    | 'document_checkmark'
    | 'document_magnifying_glass'
    | 'document_on_document'
    | 'drop'
    | 'ellipsis'
    | 'eye'
    | 'eye_crossed'
    | 'face'
    | 'face_id'
    | 'falling_coin'
    | 'file_pdf'
    | 'fingerprint'
    | 'flag'
    | 'flame'
    | 'flasher'
    | 'funnel'
    | 'gamepad'
    | 'gear'
    | 'gift'
    | 'globe'
    | 'hammer'
    | 'handset'
    | 'heart'
    | 'heart_hand'
    | 'house'
    | 'house_handset'
    | 'house_percent'
    | 'info'
    | 'key'
    | 'list'
    | 'lock_closed'
    | 'lock_opened'
    | 'magnit'
    | 'mail'
    | 'mail_eye'
    | 'mail_waves'
    | 'man_badge'
    | 'man_wheelchair'
    | 'map'
    | 'mask'
    | 'mindmap'
    | 'mobile'
    | 'mobile_plus'
    | 'mobile_plus_alt'
    | 'mobile_waves'
    | 'necklace'
    | 'note'
    | 'notebook_waves'
    | 'open_book'
    | 'other'
    | 'paper_tray'
    | 'parking'
    | 'passport'
    | 'paw'
    | 'pencil_line'
    | 'percent'
    | 'pfm'
    | 'photo'
    | 'pie_chart'
    | 'placeholder'
    | 'plane'
    | 'play'
    | 'postcard_heart'
    | 'pram'
    | 'qr_code'
    | 'receipt'
    | 'rectangle_on_dashed_rectangle'
    | 'rectangle_speech_bubble'
    | 'rectangle_speech_bubble_on_speech_bubble'
    | 'rectangle_watches'
    | 'round_speech_bubble_question'
    | 'round_watches'
    | 'ruble_dollar'
    | 'ruble_plus'
    | 'safe'
    | 'safe_diagram'
    | 'sber'
    | 'security_camera'
    | 'shield'
    | 'shield_check'
    | 'shield_crossed'
    | 'shield_lines'
    | 'shield_lines_circles'
    | 'spasibo'
    | 'speaker_waves'
    | 'square_on_square'
    | 'star_light'
    | 'student_hat'
    | 'telephone'
    | 'thermometer'
    | 'trash'
    | 'tv_set'
    | 'umbrella'
    | 'user'
    | 'user_cross'
    | 'user_on_user'
    | 'vibration'
    | 'wallet'
    | 'watering_can'
    | 'waves'
    | 'waves_cross'
    | 'whistle'
    | 'wrench'
    | 'yule';
/**
 * Возможные значения размеров изображения.
 */
export type IconSizeDimension = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
/**
 * Цвет фона см https://www.figma.com/file/yaeE0lLDWMBKKLXuDHgq1p/SmartX-Styles?node-id=19%3A15
 */
export type Color =
    | 'solid_black'
    | 'solid_white'
    | 'solid_transparent'
    | 'solid_disabled'
    | 'solid_brand'
    | 'solid_warning'
    | 'solid_critical'
    | 'solid_action'
    | 'secondary'
    | 'liquid_60'
    | 'liquid_50'
    | 'liquid_40'
    | 'liquid_30'
    | 'liquid_20'
    | 'liquid_10';
export type Actions = Action[];
/**
 * Стиль текста, см https://www.figma.com/file/D0AfmXWT5KBPiWFNg2IZoF/SmartX-Typeface?node-id=0%3A1
 */
export type Typeface =
    | 'headline1'
    | 'headline2'
    | 'headline3'
    | 'title1'
    | 'title2'
    | 'body1'
    | 'body2'
    | 'body3'
    | 'body_ai'
    | 'text1'
    | 'paragraphText1'
    | 'paragraphText2'
    | 'footnote1'
    | 'footnote2'
    | 'button1'
    | 'button2'
    | 'caption';
/**
 * Цвет текста см https://www.figma.com/file/yaeE0lLDWMBKKLXuDHgq1p/SmartX-Styles?node-id=239%3A64
 */
export type TypeColor = 'default' | 'secondary' | 'tertiary' | 'inverse' | 'brand' | 'warning' | 'critical' | 'link';
/**
 * Выравнивание элемента по вертикали.
 */
export type VerticalGravity = 'top' | 'center' | 'bottom';
/**
 * Режим растягивания и расположения изображения внутри контейнера
 */
export type ScaleMode =
    | 'scale_aspect_fill'
    | 'scale_aspect_fit'
    | 'center'
    | 'top'
    | 'bottom'
    | 'left'
    | 'right'
    | 'top_left'
    | 'top_right'
    | 'bottom_left'
    | 'bottom_right';
/**
 * Позиционирование по горизонтали
 */
export type HorizontalGravity = 'left' | 'center' | 'right';
/**
 * Размер изображения относительно карточки
 */
export type ContentSize = MatchParentContentSize | FixedContentSize;
export type RightView =
    | DisclosureRightView
    | DetailRightView
    | RoundButtonCellView
    | TagCellView
    | FlexibleImageLeftRightCellView
    | RightCellArrayView;
/**
 * Ширина контента в терминах сеток. https://www.figma.com/file/L6AlpyUxFuumKEEbh4ADIh/🤖SD-Styles?node-id=26%3A17 https://www.figma.com/file/c6KZ9jIXTB5zEmyTfA2Akv/Message-Based?node-id=1446%3A0
 */
export type GridContentWidth = 'xsmall' | 'small' | 'medium' | 'large' | 'resizable';
/**
 * Горизонтальная галерея
 */
export type GalleryCard = CardBase & {
    items: [GalleryItem, ...GalleryItem[]];
    bottom_text?: TextView;
    type: 'gallery_card';
    [k: string]: unknown;
};
export type GalleryItem = MediaGalleryItem | GallerySearchContentItem | GalleryMoreButtonItem;
/**
 * Двумерная карточка (сетка)
 */
export type GridCard = CardBase & {
    /**
     * Количество ячеек
     */
    items: GridItem[];
    type: 'grid_card';
    /**
     * Количество столбцов
     */
    columns?: number;
    item_width?: GridContentWidth;
    /**
     * Высота карточки
     */
    item_height?: 'fixed' | 'resizable';
    [k: string]: unknown;
};
export type GridItem = GreetingGridItem;
/**
 * Карточка с вертикальным списком ячеек
 */
export type SimpleList = CardBase & {
    header: string;
    footer?: string;
    items?: SimpleItem[];
    type: 'simple_list';
    [k: string]: unknown;
};
export type SimpleItem = {
    title: string;
    body: string;
};
/**
 * Упорядоченный список категорий с подмассивами из карточек
 */
export type ObjectObject = [[unknown, ...unknown[]], ...[unknown, ...unknown[]][]];
/**
 * Доступные id контекстов для поиска. Например, если задать для какого-то контекста
 * префиксы ('позвони', 'набери'), то ASR будет искать в этом контексте только,
 * если встретит слова 'позвони' или 'набери'. Если задать пустой набор префиксов,
 * то ASR будет искать в этом контексте в любом случае.
 * Таким образом, если мы хотим, чтобы поиск происходил по всем дефолтным префиксам,
 * для значений идентификаторов контекста context_id (mobile_contacts, vk_contacts, vk.fiends)
 * префиксы указывать необязательно.
 */
export type ASRContextsId = 'mobile_contacts' | 'vk_contacts' | 'vk.fiends';

export interface SystemMessage {
    /**
     * Идентификатор сессии, который обновляется каждый раз, когда в поле new_session приходит true.
     * При использовании совместно с messageId помогает гарантировать уникальность сообщения.
     * В том числе если пользователь взаимодействует с несколькими поверхностями.
     */
    sessionId: string;
    /**
     * Идентификатор запроса, который отправил ассистент.
     * Ответ на запрос должен содержать такой же идентификатор в поле messageId.
     */
    messageId: number;
    uuid: UUID;
    messageName: SystemMessageName;
    payload: SystemMessagePayload;
    [k: string]: unknown;
}
/**
 * Составной идентификатор пользователя.
 */
export interface UUID {
    /**
     * Идентификатор канала коммуникации.
     */
    userChannel: string;
    /**
     * Постоянный идентификатор пользователя созданный на основе SberID.
     * Может отсутствовать, если пользователь не аутентифицирован.
     * Может использовать для хранения контекста диалога пользователя.
     * Контекст диалога можно обновлять по значению поля new_session.
     */
    sub: string;
    /**
     * Идентификатор, который используется для определения не аутентифицированных пользователей.
     * Идентификатор может изменяться при сбросе настроек или переустановке смартапа.
     */
    userId: string;
    [k: string]: unknown;
}
/**
 * Коллекция, в которой в зависимости от потребителя и messageName передается дополнительная информация.
 */
export interface SystemMessagePayload {
    app_info: AppInfo;
    /**
     * Флаг, говорящий о том, нужно ли активировать апп, указанный в app_info, в случае если он сейчас не активен.
     */
    activate_app_info?: boolean & string;
    device?: Device;
    character: Character;
    /**
     * Имя смартапа, которое задается при создании проекта и отображается в каталоге приложений.
     */
    projectName?: string;
    strategies?: Strategies;
    /**
     * Интент, который смартап получит в следующем ответе ассистента.
     */
    intent: string;
    /**
     * Исходный интент. Значение поля отличается от значения intent только при монопольном захвате контекста.
     */
    original_intent?: string;
    /**
     * Мета данные, полученные от сервиса распознавания интентов.
     */
    intent_meta?: unknown;
    meta: Meta;
    selected_item?: SelectedItem;
    /**
     * Указывает на характер запуска смартапа. Если поле содержит true,
     * сессии присваивается новый идентификатор (поле sessionId).
     * true — приложение запущено впервые или после закрытия приложения,
     * а так же при запуске приложения по истечению тайм-аута (10 минут)
     * или после прерывания работы приложения, например, по запросу 'текущее время'.
     */
    new_session?: boolean;
    annotations?: Annotations;
    message: Message;
    server_action?: {
        type?: string;
        payload?: unknown;
        app_info?:
            | {
                  systemName: string;
                  [k: string]: unknown;
              }
            | {
                  projectId: string;
                  [k: string]: unknown;
              };
        parameters?: {
            [k: string]: unknown;
        };
        [k: string]: unknown;
    };
    /**
     * Указывает, что ассистент должен слушать пользователя после выполнения действия.
     */
    auto_listening?: boolean;
    /**
     * Текст, который ассистент озвучит пользователю.
     */
    pronounceText?: string;
    /**
     * Указывает, что в тексте, который необходимо озвучить (поле pronounceText).
     */
    pronounceTextType?: 'application/text' | 'application/ssml';
    emotion?: Emotion;
    /**
     * Список команд и элементов интерфейса смартапа.
     */
    items?: (AssistantCommand | BubbleCommand | CardCommand | PolicyRunAppComand)[];
    suggestions?: Suggestions;
    asr_hints?: ASRHints;
    hints?: Hints;
    /**
     * Сообщает ассистенту о завершении работы смартапа.
     * В приложениях типа Canvas App необходимо самостоятельно закрывать окно приложения
     * после завершения работы смартапа. Для этого требуется передать ассистенту
     * команду close_app с помощью метода assistant.close() или window.AssistantHost.close(),
     * если вы не используете Assistant Client.
     */
    finished?: boolean;
    /**
     * Массив кнопок в правой части хедера чатаппа. Не более 2х элементов.
     */
    header_buttons?: {
        icon_address: ImageAddress;
        actions?: Actions;
        /**
         * Id для отправки в метрику.
         */
        log_id?: string;
        [k: string]: unknown;
    }[];
    /**
     * Код ошибки.
     */
    code?: number;
    /**
     * Описание ошибки.
     */
    description?: string;
    [k: string]: unknown;
}
/**
 * Информация о смартапе.
 */
export interface AppInfo {
    /**
     * Идентификатор проекта в SmartApp Studio.
     */
    projectId: string;
    /**
     * Идентификатор смартапа.
     */
    applicationId: string;
    /**
     * Идентификатор опубликованной версии смартапа.
     */
    appversionId: string;
    /**
     * Ссылка на веб-приложение. Поле актуально для Canvas Apps.
     */
    frontendEndpoint?: string;
    frontendType: AppType;
    /**
     * Более читаемый аналог поля projectId. Не актуален для внешних приложений.
     */
    systemName?: string;
    /**
     * Объединённое значение полей projectId, applicationId и appversionId.
     */
    frontendStateId?: string;
    [k: string]: unknown;
}
/**
 * Информация об устройстве пользователя.
 */
export interface Device {
    /**
     * Идентификатор устройства.
     */
    deviceId: string;
    platformType: PlatformType;
    /**
     * Версия операционной системы.
     */
    platformVersion: string;
    surface: Surface;
    /**
     * Версия поверхности.
     */
    surfaceVersion: string;
    features: Features;
    capabilities: Capabilities;
    /**
     * Дополнительная информация об объекте или устройстве. В настоящий момент не используется.
     */
    additionalInfo: unknown;
    [k: string]: unknown;
}
/**
 * Описание функциональности устройства.
 */
export interface Features {
    /**
     * Типы смартапов, которые поддерживает устройство.
     */
    appTypes: AppType[];
    [k: string]: unknown;
}
/**
 * Описание возможностей устройства пользователя.
 */
export interface Capabilities {
    /**
     * Описание экрана устройства.
     */
    screen?: {
        /**
         * Признак наличия экрана.
         */
        available: boolean;
        [k: string]: unknown;
    };
    /**
     * Описание микрофона устройства.
     */
    mic?: {
        /**
         * Признак наличия микрофона.
         */
        available: boolean;
        [k: string]: unknown;
    };
    /**
     * Описание динамиков устройства.
     */
    speak?: {
        /**
         * Признак наличия динамика.
         */
        available: boolean;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Информация о текущем персонаже ассистента, который установлен у пользователя.
 */
export interface Character {
    id: CharacterId;
    name: CharacterName;
    /**
     * Пол персонажа. Учитывайте пол персонажа при проектировании ответов.
     */
    gender: 'female' | 'male';
    /**
     * Форма обращения персонажа. Учитывайте форму обращения персонажа при проектировании ответов.
     */
    appeal: 'official' | 'no_official';
    [k: string]: unknown;
}
/**
 * Возможные стратегии смартапа.
 */
export interface Strategies {
    /**
     * Сообщает, что у пользователя сегодня день рождения.
     */
    happy_birthday?: boolean;
    /**
     * Время, которое прошло с момента последнего обращения к смартапу.
     */
    last_call?: string;
    /**
     * Передается только в том случае, когда биометрия определила голос Яндекс Алисы.
     * В остальных случаях поле отсутствует.
     */
    is_alice?: boolean;
    [k: string]: unknown;
}
/**
 * Данные о содержимом экрана пользователя.
 */
export interface Meta {
    location?: Location;
    time?: Time;
    current_app?: {
        app_info: AppInfo;
        state: AppState;
        [k: string]: unknown;
    };
    permissions?: {
        type?: PermissionType;
        status?: PermissionStatus;
        [k: string]: unknown;
    }[];
    [k: string]: unknown;
}
export interface Location {
    accuracy?: number;
    lat: number;
    lon: number;
    timestamp?: number;
    [k: string]: unknown;
}
/**
 * Данные о текущем времени на устройстве пользователя.
 */
export interface Time {
    /**
     * Наименование часового пояса. Пример Europe/Moscow.
     */
    timezone_id: string;
    timezone_offset_sec: number;
    /**
     * Unix-время в миллисекундах.
     */
    timestamp: number;
    [k: string]: unknown;
}
export interface AppState {
    item_selector?: {
        /**
         * Список соответствий голосовых команд действиям в веб-приложении.
         */
        items: {
            /**
             * Порядковый номер элемента, назначается смартаппом, уникален в рамках items.
             */
            number?: number;
            /**
             * Уникальный id элемента.
             */
            id?: string;
            /**
             * Ключевая фраза, которая должна приводить к данному действию.
             */
            title?: string;
            /**
             * Фразы-синонимы, которые должны быть расценены как данное действие.
             */
            aliases?: string[];
            /**
             * Сервер экшен, проксирует action обратно на бекэнд.
             */
            server_action?: unknown;
            /**
             * Экшен, который вернется в AssistantSmartAppData.
             */
            action?: unknown;
            [k: string]: unknown;
        }[];
        ignored_words?: string[];
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Описание элемента экрана, который пользователь назвал при запросе ('включи второй'/'включи второго терминатора').
 *  Для работы этой функциональности нужна отправка во входящем сообщении с фронтенда
 * item_selector со списком элементов. Объект передаётся всегда и может быть либо пустым,
 * либо содержать все указанные поля.
 */
export interface SelectedItem {
    /**
     * Номер элемента из списка, начиная с 0.
     */
    index: number;
    /**
     * Название элемента.
     */
    title: string;
    /**
     * Указывает выбор элемента по номеру.
     */
    is_query_by_number: boolean;
    [k: string]: unknown;
}
/**
 * Общие характеристики сообщения пользователя.
 */
export interface Annotations {
    /**
     * Информация о прохождении цензуры.
     */
    censor_data: {
        classes: CensorClass[];
        /**
         * Коэффициенты подцензурных категорий в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    /**
     * Эмоциональная окраска текста пользователя.
     */
    text_sentiment: {
        classes: PhraseEmotions[];
        /**
         * Коэффициенты той или иной эмоциональной характеристики текста пользователя в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    /**
     * Эмоциональная окраска голоса пользователя.
     */
    asr_sentiment: {
        classes: PhraseEmotions[];
        /**
         * Коэффициенты той или иной эмоциональной характеристики реплики пользователя в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Результат предобработки.
 */
export interface Message {
    /**
     * Исходное сообщение пользователя: распознанный голос или введенный текст.
     * В случае распознанного голоса предоставляется текст запроса без нормализации числительных и другого,
     * соответственно, все числа, номера телефонов и тд представлены словами.
     */
    original_text: string;
    /**
     * Нормализованный текст, который ввел пользователь.
     * Можно использовать для снижения многообразия запросов, например, для аналитики.
     */
    normalized_text: string;
    /**
     * Отображаемый на экране текст запроса/нормализованный на этапе ASR запрос.
     */
    asr_normalized_message: string | null;
    /**
     * Извлечённая из tokenized_elements_list информация о значениях найденных в запросе типов сущностей
     */
    entities: Entities;
    /**
     * Список словарей, в котором каждый словарь - это вся информация о слове:
     * оригинальная и начальная формы слова, род, число, зависимые слова, тип связи между словами и прочее
     */
    tokenized_elements_list: TokenizedElementsList[];
    /**
     * Числительные превращены в числа, номера телефонов - в их нормализованное представление, слова - в леммы
     */
    human_normalized_text: string;
    /**
     * Аналогично human_normalized_text с учётом замены анафоры
     */
    human_normalized_text_with_anaphora: string;
    [k: string]: unknown;
}
/**
 * Извлеченные из запроса сущности.
 */
export interface Entities {
    CCY_TOKEN: CcyToken[];
    MONEY_TOKEN: MoneyToken[];
    NUM_TOKEN: NumToken[];
    [k: string]: unknown;
}
export interface CcyToken {
    value: string;
    [k: string]: unknown;
}
export interface MoneyToken {
    amount: number;
    currency: string;
    [k: string]: unknown;
}
export interface NumToken {
    adjectival_number: boolean;
    value: number;
    [k: string]: unknown;
}
export interface TokenizedElementsList {
    dependency_type?: string;
    grammem_info?: GrammemInfo;
    head?: number;
    lemma: string;
    list_of_dependents?: number[];
    text: string;
    composite_token_length?: number;
    composite_token_type?: string;
    composite_token_value?: MoneyToken;
    is_beginning_of_composite?: boolean;
    list_of_token_types_data?: ListOfTokenTypesData;
    token_type?: string;
    token_value?: TokenValue;
    [k: string]: unknown;
}
export interface GrammemInfo {
    aspect?: string;
    mood?: string;
    number?: string;
    part_of_speech: string;
    person?: string;
    raw_gram_info: string;
    transitivity?: string;
    verbform?: string;
    voice?: string;
    numform?: string;
    degree?: string;
    case?: string;
    gender?: string;
    animacy?: string;
    [k: string]: unknown;
}
export interface TokenValue {
    adjectival_number?: boolean;
    value: number | string;
    [k: string]: unknown;
}
/**
 * Эмоция, которую нужно отобразить в лавашаре
 */
export interface Emotion {
    emotionId: EmotionId;
    [k: string]: unknown;
}
export interface AssistantCommand {
    command:
        | SmartAppDataCommand
        | ActionCommand
        | CloseAppCommand
        | PermissionCommand
        | InvoiceCommand
        | SmartAppErrorCommand;
    [k: string]: unknown;
}
/**
 * Команда для передачи данных в Canvas App.
 */
export interface SmartAppDataCommand {
    type: 'smart_app_data';
    /**
     * Валидный JSON-объект с произвольными данными для смартапа.
     */
    smart_app_data?: unknown;
    [k: string]: unknown;
}
export interface ActionCommand {
    type: 'action';
    action: Action;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает отправку сообщения от имени пользователя в чат с ассистентом.
 */
export interface TextAction {
    /**
     * Тип действия.
     */
    type: 'text';
    /**
     * Текст сообщения от имени пользователя.
     */
    text: string;
    /**
     * true, если сообщение нужно отобразить в чате и отправить в бекэнд,
     * false если сообщение нужно только отобразить в чате, и не отправлять на бекэнд
     */
    should_send_to_backend?: boolean;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает обработку диплинка ассистентом или хост-приложением.
 */
export interface DeepLinkAction {
    /**
     * Тип действия.
     */
    type: 'deep_link';
    /**
     * Диплинк, который нужно открыть.
     */
    deep_link: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает копирование текста из карточки в буфер обмена.
 */
export interface CopyTextAction {
    /**
     * Тип действия.
     */
    type: 'copy_text_to_buffer';
    /**
     * Текст, который будет скопирован в буфер обмена.
     */
    text: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает отправку номера телефона указанного контакта
 */
export interface SendContactPhone {
    /**
     * Тип действия.
     */
    type: 'send_contact_phone';
    /**
     * Id контакта
     */
    send_contact_phone: number;
    /**
     * Может содержать подстроку [[placeholder]].
     * Клиент должен подставить в строку шаблона вместо [[placeholder]]
     * номер телефона контакта имеющий id указаный в send_contact_phone
     */
    template?: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает обработку сервер-экшена ассистентом или хост-приложением.
 */
export interface ServerAction {
    /**
     * Тип действия.
     */
    type: 'server_action';
    /**
     * Данная строка будет подставлена в исходящее с мобильного SDK системное сообщение в поле MESSAGE_NAME.
     */
    message_name?: string;
    /**
     * Используется для фильтрации данных, явно указывающая на то,
     * что server_action не может повлиять на состояние UI в SDK
     * (фильтруется озвучка, саджесты и возможность открыть новый экран).
     */
    mode?: 'background' | 'foreground';
    /**
     * Сервер-экшен, который нужно отправить.
     */
    server_action: {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Запрос поиска от сценария.
 */
export interface StartSmartSearchAction {
    /**
     * Тип действия.
     */
    type: 'start_smart_search';
    /**
     * Данные запроса.
     */
    start_smart_search: {
        /**
         * Текст запроса, который прислал сценарий.
         */
        query: string;
        /**
         * Время за которое поиск должен ответить.
         */
        timeoutMS?: string;
    };
    [k: string]: unknown;
}
/**
 * Закрытие смартапа.
 */
export interface CloseAppCommand {
    type: 'close_app';
    [k: string]: unknown;
}
/**
 * Запрос разрешений на получение и обработку данных пользователя.
 */
export interface PermissionCommand {
    type: 'request_permissions';
    permissions: PermissionType[];
    [k: string]: unknown;
}
/**
 * Команда для получения инвойса платежа.
 */
export interface InvoiceCommand {
    type: 'payment_invoice';
    payment_invoice: {
        /**
         * Идентификатор инвойса.
         */
        invoice_id: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Команда для прокидывания ошибки в Canvas App.
 */
export interface SmartAppErrorCommand {
    type: 'smart_app_error';
    smart_app_error: {
        code: number;
        description: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
export interface BubbleCommand {
    bubble: Bubble;
    [k: string]: unknown;
}
/**
 * Передача текста.
 */
export interface Bubble {
    /**
     * Текст, который отобразит ассистент.
     */
    text: string;
    /**
     * Указывает, что текст содержит маркдаун-разметку, которую необходимо обработать.
     */
    markdown?: boolean;
    /**
     * Поведение шторки ассистента. Параметр актуален при работе с ассистентом на наших устройствах.
     */
    expand_policy?: 'auto_expand' | 'force_expand' | 'preserve_panel_state';
    [k: string]: unknown;
}
export interface CardCommand {
    card: Card;
    [k: string]: unknown;
}
/**
 * Свойства любой карточки.
 */
export interface CardBase {
    paddings?: Paddings;
    /**
     * Свойство, говорящее о том, что карточка может стать визуально задизейблена.
     */
    can_be_disabled?: boolean;
    [k: string]: unknown;
}
/**
 * Объект для описания отступов ui компонента.
 */
export interface Paddings {
    left?: Dimension;
    top?: Dimension;
    right?: Dimension;
    bottom?: Dimension;
    [k: string]: unknown;
}
export interface LeftRightCellView {
    /**
     * Тип ячейки
     */
    type: 'left_right_cell_view';
    left: LeftView;
    right?: RightView;
    divider?: DividerView;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Горизонтальный упорядоченный блок содержащий icon и texts
 */
export interface SimpleLeftView {
    /**
     * Тип левого элемента ячейки.
     */
    type: 'simple_left_view';
    icon?: IconView;
    /**
     * Вертикальный упорядоченный список содержащий title, subtitle, caption, https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5641
     */
    texts?: {
        title?: TextView;
        subtitle?: TextView;
        caption?: TextView;
        margins?: Margins;
        [k: string]: unknown;
    };
    icon_vertical_gravity?: VerticalGravity;
    title?: TextView;
    [k: string]: unknown;
}
/**
 * Иконка
 */
export interface IconView {
    address: ImageAddress;
    size: IconSize;
    margins?: Margins;
    tint_color?: Color;
    rounded_corners?: 'none' | 'rounded' | 'circle';
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Размер изображения.
 */
export interface IconSize {
    width: IconSizeDimension;
    height: IconSizeDimension;
    [k: string]: unknown;
}
/**
 * Объект для описания отступов ui компонента.
 */
export interface Margins {
    left?: Dimension;
    top?: Dimension;
    right?: Dimension;
    bottom?: Dimension;
    [k: string]: unknown;
}
/**
 * Текстовый элемент
 */
export interface TextView {
    /**
     * Текст, который нужно отобразить
     */
    text: string;
    typeface: Typeface;
    text_color: TypeColor;
    margins?: Margins;
    /**
     * Максимальное количество строк. 0 - не ограничено.
     */
    max_lines?: number;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Вертикальный упорядоченный список, состоит из label, icon_and_value https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=227%3A3670
 */
export interface FastAnswerLeftView {
    /**
     * Тип левого элемента ячейки.
     */
    type: 'fast_answer_left_view';
    label?: TextView;
    /**
     * Горизонтальный упорядоченный список содержит icon и value, https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=227%3A3670
     */
    icon_and_value?: {
        icon?: IconView;
        value?: TextView;
        margins?: Margins;
        required?: ['value'];
        [k: string]: unknown;
    };
    margins?: Margins;
    [k: string]: unknown;
}
export interface FlexibleImageLeftRightCellView {
    /**
     * Тип ячейки
     */
    type: 'flexible_image_left_right_cell_view';
    content: FlexibleImageView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Изображение из интернета с гибкими настройками размера и расположения внутри карточки
 */
export interface FlexibleImageView {
    /**
     * Ссылка на изображение
     */
    url: string;
    /**
     * Hash картинки в интернете (опционален)
     */
    hash?: string;
    placeholder?: LocalImageIdentificator;
    placeholder_color?: Color;
    scale_mode?: ScaleMode;
    gravity?: Gravity;
    size?: ContentSize;
    /**
     * Градиентная альфа-маска для изображения. Значение определяет направление градиента
     */
    mask?: 'none' | 'bottom';
    actions?: Action;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Список ячеек типа right
 */
export interface RightCellArrayView {
    type: 'right_cell_array_view';
    /**
     * Направление списка (вертикальное или горизонтальное)
     */
    orientation?: 'horizontal' | 'vertical';
    items: Exclude<RightView, RightCellArrayView>[];
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Позиционирование контейнера с изображением внутри карточки (игнорируется, если size - match_parent)
 */
export interface Gravity {
    vertical_gravity?: VerticalGravity;
    horizontal_gravity?: HorizontalGravity;
    [k: string]: unknown;
}
/**
 * Размер контента совпадает с размером контейнера
 */
export interface MatchParentContentSize {
    type: 'match_parent';
    [k: string]: unknown;
}
/**
 * Контент имеет фиксированную высоту и ширину
 */
export interface FixedContentSize {
    type: 'fixed';
    /**
     * Ширина контента
     */
    width: number;
    /**
     * Высота контента
     */
    height: number;
    [k: string]: unknown;
}
/**
 * Угловая скобка. Соответствует UITableViewCell.AccessoryType.disclosureIndicator
 */
export interface DisclosureRightView {
    /**
     * Тип правого элемента ячейки.
     */
    type: 'disclosure_right_view';
    margins?: Margins;
    actions?: Actions;
    [k: string]: unknown;
}
/**
 * Вертикальный упорядоченный блок, содержащий опциональные detail и info_box https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5686
 */
export interface DetailRightView {
    /**
     * Тип правого элемента ячейки.
     */
    type: 'detail_right_view';
    detail?: TextView;
    /**
     * Горизнотальный упорядоченный блок, содержащий опциональные info и icon https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5686
     */
    info_and_icon?: {
        info?: TextView;
        icon?: IconView;
        margins?: Margins;
        [k: string]: unknown;
    };
    margins?: Margins;
    vertical_gravity?: VerticalGravity;
    /**
     * Расположение detail относительно info_and_icon
     */
    detail_position?: 'top' | 'bottom';
    [k: string]: unknown;
}
export interface RoundButtonCellView {
    /**
     * Тип ячейки
     */
    type: 'round_button_cell_view';
    content: RoundButtonView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Круглая кнопка для универсальных карточек
 */
export interface RoundButtonView {
    icon_address: ImageAddress;
    icon_tint?: Color;
    background_color?: Color;
    actions: Actions;
    [k: string]: unknown;
}
export interface TagCellView {
    /**
     * Тип ячейки
     */
    type: 'tag_cell_view';
    content: TagView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Тег для универсальных карточек
 */
export interface TagView {
    text_view: TextView;
    background_color?: Color;
    [k: string]: unknown;
}
/**
 * Divider/Separator. Тонка полоска, разделяющая ячейки
 */
export interface DividerView {
    /**
     * Стиль дивайдера.
     */
    style: 'default' | 'read_only';
    /**
     * Возможные размеры сепаратора/дивайдера https://www.figma.com/file/sC1HJg3HRcNjaG3rcd4b3V/Templates?node-id=289%3A3210
     */
    size: 'd1' | 'd2' | 'd3' | 'd4' | 'd5';
    [k: string]: unknown;
}
export interface TextCellView {
    /**
     * Тип ячейки
     */
    type: 'text_cell_view';
    content: TextView;
    divider?: DividerView;
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface ButtonCellView {
    /**
     * Тип ячейки
     */
    type: 'button_cell_view';
    content: ButtonView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Кнопки для универсальных карточек
 */
export interface ButtonView {
    /**
     * Текст кнопки.
     */
    text: string;
    typeface?: Typeface;
    /**
     * Стиль кнопки.
     */
    style?: 'default' | 'transparent';
    /**
     * Тип кнопки.
     */
    type?: 'accept' | 'disabled' | 'negative';
    actions: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    margins?: Margins;
    [k: string]: unknown;
}
export interface ImageCellView {
    /**
     * Тип ячейки
     */
    type: 'image_cell_view';
    content: ImageView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Изображение из интернета. Ширина изображения будет соответствовать всей ширине карточке.
 */
export interface ImageView {
    /**
     * Адрес изображения в интернет
     */
    url: string;
    /**
     * Hash катинки в интернете(опционален)
     */
    hash?: string;
    placeholder?: LocalImageIdentificator;
    scale_mode?: ScaleMode;
    /**
     * Высота контейнера под картинку, указывается в платформонезависимых поинтах
     */
    height?: number;
    placeholder_color?: Color;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    size?: GridContentSize;
    [k: string]: unknown;
}
/**
 * Размера изображения. Если есть size, то height игнорируется
 */
export interface GridContentSize {
    width: GridContentWidth;
    /**
     * Отношение высоты контента к ширине
     */
    aspect_ratio: number;
    [k: string]: unknown;
}
export interface DetailsCellView {
    /**
     * Тип ячейки
     */
    type: 'details_cell_view';
    details: [DetailRightView, ...DetailRightView[]];
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface WeatherCellView {
    /**
     * Тип ячейки
     */
    type: 'weather_cell_view';
    content: [WeatherView, ...WeatherView[]];
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Строка карточки погоды на неделю
 */
export interface WeatherView {
    weekday: string;
    date: string;
    day: string;
    night: string;
    icon: IconView;
    [k: string]: unknown;
}
/**
 * Ячейка, отображающая контент по правому краю
 */
export interface RightSideCellView {
    /**
     * Тип ячейки
     */
    type: 'right_side_cell_view';
    content: RightView;
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface FlexibleImageCellView {
    /**
     * Тип ячейки
     */
    type: 'flexible_image_cell_view';
    content: FlexibleImageView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Элемент галереи состоящий из изображения и двух текстовых полей
 */
export interface MediaGalleryItem {
    /**
     * Тип элемента галереи
     */
    type: 'media_gallery_item';
    image: ImageView;
    top_text?: TextView;
    bottom_text?: TextView;
    margins?: Margins;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Элемент карточки галереи с заголовком, ссылкой и описанием
 */
export interface GallerySearchContentItem {
    /**
     * Тип элемента отдельной карточки
     */
    type: 'gallery_search_content_item';
    title_text: TextView;
    image?: ImageAddress;
    link_text: TextView;
    description_text?: TextView;
    paddings?: Paddings;
    actions: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    width?: GridContentWidth;
    [k: string]: unknown;
}
/**
 * Кнопка "Все результаты" в карточке галереи
 */
export interface GalleryMoreButtonItem {
    /**
     * Тип элемента кнопки всех результатов
     */
    type: 'gallery_more_button_item';
    bottom_text: TextView;
    icon: IconView;
    actions: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Элемент карточки приветствия, состоящий из двух текстовых полей и опционального изображения
 */
export interface GreetingGridItem {
    /**
     * Тип элемента карточки приветствия
     */
    type: 'greeting_grid_item';
    background_image?: ImageView;
    top_text: TextView;
    bottom_text: TextView;
    paddings?: Paddings;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Карточка с вертикальным списком ячеек для отображения в ленте.
 */
export interface DiscoveryCard {
    /**
     * Ячейки с контентом карточки
     */
    cells: {
        [k: string]: unknown;
    };
    background_image?: FlexibleImageView;
    /**
     * Цвет, которым заливается фон карточки. Задаётся как HEX c компонентом alpha в виде #AARRGGBB или #RRGGBB
     */
    background_color?: string;
    /**
     * Имеет ли карточка затемнение в нижней части
     */
    has_fade?: boolean;
    /**
     * Количество колонок, которое занимает карточка по ширине
     */
    width_columns?: 2 | 3 | 4;
    /**
     * Соотношение сторон карточки - W:H
     */
    aspect_ratio?: '1:1' | '2:3' | '3:2' | '3:4' | '16:9';
    actions?: Actions;
    type: 'discovery_card';
    paddings?: Paddings;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Содержимое QR-code. Ширина сгенерированного изображения будет соответствовать всей ширине карточке
 */
export interface QRCodeCard {
    /**
     * Тип ячейки
     */
    type: 'qr_code_card';
    /**
     * Содержимое QR-кода
     */
    data: string;
    size?: GridContentSize;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Виджет с заголовком раздела и действием
 */
export interface WidgetTitleCard {
    cell: LeftRightCellView;
    type: 'widget_title_card';
    [k: string]: unknown;
}
/**
 * Горизонтальная галерея
 */
export interface WidgetGallery {
    items: [DiscoveryCard, ...DiscoveryCard[]];
    type: 'widget_gallery';
    [k: string]: unknown;
}
/**
 * Горизонтальная галерея с категориями
 */
export interface WidgetGalleryWithCategories {
    /**
     * Описание цветов для чипа категорий
     */
    chip?: {
        [k: string]: unknown;
    };
    categories: ObjectObject;
    categories_paddings?: Paddings;
    type: 'widget_gallery_with_categories';
    [k: string]: unknown;
}
/**
 * Виджет с одиночной карточкой
 */
export interface WidgetSingleCard {
    item: DiscoveryCard;
    type: 'widget_single_card';
    [k: string]: unknown;
}
export interface WidgetTwoColumns {
    /**
     * Группировка карточек в две колонки
     */
    type: 'widget_two_columns';
    left: ColumnView;
    right: ColumnView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Вертикальный список карточек в одной колонке
 */
export interface ColumnView {
    cards?: [DiscoveryCard] | [DiscoveryCard, DiscoveryCard] | [DiscoveryCard, DiscoveryCard, DiscoveryCard];
    [k: string]: unknown;
}
export interface PolicyRunAppComand {
    command: 'POLICY_RUN_APP';
    nodes: {
        server_action: {
            app_info: {
                systemName: string;
                [k: string]: unknown;
            };
            parameters: {
                [k: string]: unknown;
            };
            [k: string]: unknown;
        };
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Предложения, которые смартап может сделать пользователю в зависимости от контекста диалога.
 * Предложения могут быть представлены в виде кнопок и карточек.
 * Важно! В интерфейсе SberBox предложения носят информационный характер. Оформляйте их в виде подсказок, а не кнопок.
 */
export interface Suggestions {
    /**
     * Список кнопок с предложениями смартапа. Каждая кнопка представлена в виде отдельного объекта.
     */
    buttons: Button[];
    [k: string]: unknown;
}
/**
 * Описание одной кнопки саджеста. Если пришел объект actions, то action игнорируется
 */
export interface Button {
    /**
     * Название кнопки, которое отображается в интерфейсе ассистента.
     */
    title: string;
    action?: Action;
    actions?: Actions;
    /**
     * Id для отправки в метрику.
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Подсказки для сервиса синтеза и распознавания речи.
 */
export interface ASRHints {
    /**
     * Позволяет использовать список слов или фраз, не хранящихся в ASR, для одноразового определения контекста.
     */
    words?: string[];
    /**
     * Позволяет включить опцию обработки коротких слов и букв, которые по умолчанию блокируются ASR.
     */
    enable_letters?: boolean;
    /**
     * Меняет интервал ожидания речи пользователя. Возможные значения от 2 до 20 секунд.
     */
    nospeechtimeout?: number;
    /**
     * Позволяет выбирать модель распознавания речи в запросе.
     * Если передаётся валидная модель (media или general), то в запросе она может быть изменена.
     * Модель media распознаёт русский и английский языки. Модель general использует только русский язык.
     */
    model?: 'media' | 'general';
    contexts?: ASRContextsId;
    [k: string]: unknown;
}
export interface Hints {
    /**
     * Если параметр true, то показываем хинты случайным образом.
     */
    random?: boolean;
    /**
     * Параметр для бездействия. Через сколько начинаем показывать хинты.
     */
    start_time?: number;
    items: Hint[];
    [k: string]: unknown;
}
export interface Hint {
    /**
     * Первые слова, которые отображаются полупрозрачным текстом.
     */
    prefix?: string;
    /**
     * Основной текст.
     */
    text: string;
    /**
     * Время показа хинта в миллисекундах.
     */
    alive_time: number;
    /**
     * Время после показа хинта до показа следующего в массиве.
     */
    next_time: number;
    [k: string]: unknown;
}
